name: "Scan Docker Images"
on: 
  push:
    branches:
      - main

jobs:
  AWS:
    name: Despliegue en AWS
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      security-events: write
      actions: read
      contents: read

    steps:
      - name: "Obteniendo código de repositorio"
        uses: actions/checkout@v3
      
      - name: "Configuración de credenciales en AWS"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ARN }}
          aws-region: us-east-2
      
      - name: "Scan Infra: Checkov"
        uses: bridgecrewio/checkov-action@v12
        with:
          output_format: cli,sarif
          output_file_path: console,results.sarif
          directory: Terraform
          framework: terraform
          soft_fail: true
      
      - name: "Aprovisianamiento con terraform"
        run: |
          cd Terraform
          terraform init
          terraform plan -out tfplan
          terraform apply tfplan >> results_tfplan.txt
          ip_webgoat=$(cat results_tfplan.txt | grep "My_ip = " | awk '{ print $3 }' | sed 's/"//g')
          sed -i "s/IP/$ip_webgoat/g" ../Ansible/inventario
          
      - name: "Ansible"
        env:
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
        run: |
          sudo apt update
          sudo apt install -y ansible
          cd Ansible
          echo "$PRIVATE_KEY" >> $HOME/key.pem
          sudo chmod 600 $HOME/key.pem
          export ANSIBLE_HOST_KEY_CHECKING=False
          ansible-playbook -i inventario server.yml --become --private-key $HOME/key.pem
          echo "Up server..."
          sleep 45
        continue-on-error: true
      
      - name: "Obtener Arachni - DAST"
        run: |
          wget https://github.com/Arachni/arachni/releases/download/v1.6.1.3/arachni-1.6.1.3-0.6.1.1-linux-x86_64.tar.gz
          tar -xvf arachni-1.6.1.3-0.6.1.1-linux-x86_64.tar.gz  

      - name: "Evaluar aplicacion en contenedor - DAST"
        run: |
          ip_webgoat=$(cat Terraform/results_tfplan.txt | grep "My_ip = " | awk '{ print $3 }' | sed 's/"//g')
          curl http://$ip_webgoat:8080/WebGoat/login
          ./arachni-1.6.1.3-0.6.1.1/bin/arachni --check=* http://$ip_webgoat:8080/WebGoat/login
        
      - name: "Destruccion de infraestructura"
        run: |
          cd Terraform
          terraform plan -destroy -out tfplan
          terraform apply tfplan